// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppFaddeeva.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Faddeeva_w
std::vector< std::complex<double> > Faddeeva_w(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_Faddeeva_w_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(Faddeeva_w(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_Faddeeva_w(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_Faddeeva_w_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfcx
std::vector< std::complex<double> > erfcx(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_erfcx_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfcx(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_erfcx(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_erfcx_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erf
std::vector< std::complex<double> > erf(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_erf_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erf(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_erf(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_erf_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfi
std::vector< std::complex<double> > erfi(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_erfi_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfi(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_erfi(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_erfi_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// erfc
std::vector< std::complex<double> > erfc(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_erfc_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(erfc(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_erfc(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_erfc_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Dawson
std::vector< std::complex<double> > Dawson(const std::vector< std::complex<double> >& z, double relerr);
static SEXP _RcppFaddeeva_Dawson_try(SEXP zSEXP, SEXP relerrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type relerr(relerrSEXP);
    rcpp_result_gen = Rcpp::wrap(Dawson(z, relerr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppFaddeeva_Dawson(SEXP zSEXP, SEXP relerrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppFaddeeva_Dawson_try(zSEXP, relerrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _RcppFaddeeva_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::vector< std::complex<double> >(*Faddeeva_w)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfcx)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erf)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfi)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*erfc)(const std::vector< std::complex<double> >&,double)");
        signatures.insert("std::vector< std::complex<double> >(*Dawson)(const std::vector< std::complex<double> >&,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _RcppFaddeeva_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_Faddeeva_w", (DL_FUNC)_RcppFaddeeva_Faddeeva_w_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_erfcx", (DL_FUNC)_RcppFaddeeva_erfcx_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_erf", (DL_FUNC)_RcppFaddeeva_erf_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_erfi", (DL_FUNC)_RcppFaddeeva_erfi_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_erfc", (DL_FUNC)_RcppFaddeeva_erfc_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_Dawson", (DL_FUNC)_RcppFaddeeva_Dawson_try);
    R_RegisterCCallable("RcppFaddeeva", "_RcppFaddeeva_RcppExport_validate", (DL_FUNC)_RcppFaddeeva_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppFaddeeva_Faddeeva_w", (DL_FUNC) &_RcppFaddeeva_Faddeeva_w, 2},
    {"_RcppFaddeeva_erfcx", (DL_FUNC) &_RcppFaddeeva_erfcx, 2},
    {"_RcppFaddeeva_erf", (DL_FUNC) &_RcppFaddeeva_erf, 2},
    {"_RcppFaddeeva_erfi", (DL_FUNC) &_RcppFaddeeva_erfi, 2},
    {"_RcppFaddeeva_erfc", (DL_FUNC) &_RcppFaddeeva_erfc, 2},
    {"_RcppFaddeeva_Dawson", (DL_FUNC) &_RcppFaddeeva_Dawson, 2},
    {"_RcppFaddeeva_RcppExport_registerCCallable", (DL_FUNC) &_RcppFaddeeva_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppFaddeeva(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
